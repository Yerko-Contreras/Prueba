# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reviews', type: :request do
    # This should return the minimal set of attributes required to create a valid
    # Review. As you add validations to Review, be sure to
    # adjust the attributes here as well.
    before(:all) do
        @user1 = User.create!(email: 'test@mail.com',
                              password: 'testpassword123',
                              password_confirmation: 'testpassword123',
                              address: 'calle123',
                              phone: '56956569',
                              username: 'Test Name')

        @user2 = User.create!(email: 'test2@mail.com',
                              password: 'testpassword123',
                              password_confirmation: 'testpassword123',
                              address: 'calle123',
                              phone: '56956569',
                              username: 'Test Second')
    end

    before(:each) do
        sign_in @user2
    end

    after(:all) do
        sign_out @user2
        @user1.destroy
        @user2.destroy
    end

    let(:valid_attributes) do
        { score: '4', content: 'A valid review content', receiver_id: @user1.id, user_id: @user2.id }
    end

    let(:invalid_attributes) do
        { score: '0', content: nil }
    end

    describe 'GET /index' do
        it 'renders a successful response' do
            get reviews_url
            expect(response).to be_successful
        end
    end

    describe 'GET /show' do
        it 'renders a successful response' do
            review = Review.create! valid_attributes
            get review_url(review)
            expect(response).to be_successful
        end
    end

    describe 'GET /new' do
        it 'renders a successful response' do
            get new_review_url(review: { receiver_id: @user1.id, user_id: @user2.id })
            expect(response).to be_successful
        end
    end

    describe 'GET /edit' do
        it 'renders a successful response' do
            review = Review.create! valid_attributes
            get edit_review_url({ review: { receiver_id: @user1.id, user_id: @user2.id }, id: review })
            expect(response).to be_successful
        end
    end

    describe 'POST /create' do
        context 'with valid parameters' do
            it 'creates a new Review' do
                expect do
                    post reviews_url, params: { review: valid_attributes }
                end.to change(Review, :count).by(1)
            end

            it 'redirects to the created review' do
                post reviews_url, params: { review: valid_attributes }
                expect(response).to redirect_to(turnos_path)
            end
        end

        context 'with invalid parameters' do
            it 'does not create a new Review' do
                expect do
                    post reviews_url, params: { review: invalid_attributes }
                end.to change(Review, :count).by(0)
            end

            it "renders a successful response (i.e. to display the 'new' template)" do
                post reviews_url, params: { review: invalid_attributes }
                expect(response).not_to be_successful
            end
        end
    end

    describe 'PATCH /update' do
        context 'with valid parameters' do
            let(:new_attributes) do
                { score: '3', content: 'A NEW valid review content' }
            end

            it 'updates the requested review' do
                review = Review.create! valid_attributes
                patch review_url(review), params: { review: new_attributes }
                review.reload
                assert review.save
            end

            it 'redirects to the review' do
                review = Review.create! valid_attributes
                patch review_url(review), params: { review: new_attributes }
                review.reload
                expect(response).to redirect_to(turnos_path)
            end
        end

        context 'with invalid parameters' do
            it "renders a successful response (i.e. to display the 'edit' template)" do
                review = Review.create! valid_attributes
                patch review_url(review), params: { review: invalid_attributes }
                expect(response).not_to be_successful
            end
        end
    end

    describe 'DELETE /destroy' do
        it 'destroys the requested review' do
            review = Review.create! valid_attributes
            expect do
                delete review_url(review)
            end.to change(Review, :count).by(-1)
        end

        it 'redirects to the reviews list' do
            review = Review.create! valid_attributes
            delete review_url(review)
            expect(response).to redirect_to(mis_resenas_path)
        end
    end
end
