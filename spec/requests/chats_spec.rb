# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/chats', type: :request do
    # This should return the minimal set of attributes required to create a valid
    # Chat. As you add validations to Chat, be sure to
    # adjust the attributes here as well.
    before(:all) do
        @user1 = User.create!(email: 'test@mail.com',
                              password: 'testpassword123',
                              password_confirmation: 'testpassword123',
                              address: 'calle123',
                              phone: '56956569',
                              username: 'Test Name')

        @user2 = User.create!(email: 'test2@mail.com',
                              password: 'testpassword123',
                              password_confirmation: 'testpassword123',
                              address: 'calle123',
                              phone: '56956569',
                              username: 'Test Second',
                              admin: true)

        @turno = @user1.turnos.create!(address_in: 'Campus',
                                       address_out: 'Casa',
                                       capacity: rand(1..10),
                                       route: 'IDA',
                                       day: 'MARTES',
                                       hour: '15:30',
                                       user_id: @user1.id)

        @turno.users << User.find_by(id: @user1.id)
    end

    before(:each) do
        sign_in @user2
    end

    after(:all) do
        sign_out @user2
        @turno.destroy
        @user1.destroy
        @user2.destroy
    end

    let(:valid_attributes) do
        { content: 'A valid content paragraph', turno_id: @turno.id, user_id: @user1.id }
    end

    let(:invalid_attributes) do
        { content: nil }
    end

    describe 'GET /index' do
        it 'renders a successful response' do
            get chats_url
            expect(response).to be_successful
        end
    end

    describe 'GET /show' do
        it 'renders a successful response' do
            chat = @user1.chats.create! valid_attributes
            get chat_url(chat)
            expect(response).to be_successful
        end
    end

    describe 'GET /new' do
        it 'renders a successful response' do
            get new_chat_url(chat: { turno_id: @turno.id, user_id: @user1.id })
            expect(response).to be_successful
        end
    end

    describe 'GET /edit' do
        it 'renders a successful response' do
            chat = @user1.chats.create! valid_attributes
            get edit_chat_url({ chat: { turno_id: @turno.id, user_id: @user1.id }, id: chat })
            expect(response).to be_successful
        end
    end

    describe 'POST /create' do
        context 'with valid parameters' do
            it 'creates a new Chat' do
                expect do
                    post chats_url, params: { chat: valid_attributes }
                end.to change(Chat, :count).by(1)
            end

            it 'redirects to the created chat' do
                post chats_url, params: { chat: valid_attributes }
                expect(response).to redirect_to(chat_room_path(turno: { id: @turno.id }))
            end
        end

        context 'with invalid parameters' do
            it 'does not create a new Chat' do
                expect do
                    post chats_url, params: { chat: invalid_attributes }
                end.to change(Chat, :count).by(0)
            end

            it "renders a successful response (i.e. to display the 'new' template)" do
                post chats_url, params: { chat: invalid_attributes }
                expect(response).not_to be_successful
            end
        end
    end

    describe 'PATCH /update' do
        context 'with valid parameters' do
            let(:new_attributes) do
                { content: 'New valid paragraph' }
            end

            it 'updates the requested chat' do
                chat = Chat.create! valid_attributes
                patch chat_url(chat), params: { chat: new_attributes }
                chat.reload
                assert chat.save
            end

            it 'redirects to the chat' do
                chat = Chat.create! valid_attributes
                patch chat_url(chat), params: { chat: new_attributes }
                chat.reload
                expect(response).to redirect_to(chat_room_path(turno: { id: @turno.id }))
            end
        end

        context 'with invalid parameters' do
            it "renders a successful response (i.e. to display the 'edit' template)" do
                chat = Chat.create! valid_attributes
                patch chat_url(chat), params: { chat: invalid_attributes }
                expect(response).not_to be_successful
            end
        end
    end

    describe 'DELETE /destroy' do
        it 'destroys the requested chat' do
            chat = Chat.create! valid_attributes
            expect do
                delete chat_url(chat)
            end.to change(Chat, :count).by(-1)
        end

        it 'redirects to the chats list' do
            chat = Chat.create! valid_attributes
            delete chat_url(chat)
            expect(response).to redirect_to(chat_room_path(turno: { id: @turno.id }))
        end
    end
end
